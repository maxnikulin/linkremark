
#+PROPERTY: header-args :eval never-export :exports code :results silent
#+TITLE: LinkRemark — notes for web pages augmented by metadata

* Introduction

LinkRemark is a browser extension that allows to save some context
while capturing notes using [[https://orgmode.org][Org mode]] for [[https://www.gnu.org/software/emacs/][GNU Emacs]].
The add-on attempts to extract some metadata from the current web page, e.g.
author, time when the text was written.
Actually it just generates (almost) text notes using a few elements
of Org mode markup.

The idea is that the note for a link should not be just a *bookmark*
to the link target. It should reflect connection of the page
where it is found and the site it points to.
A site that brought you to the current page (referrer) could later
help find more information related to the topic.
Consider it as an element of associative trails described by Vannevar Bush
([[https://www.theatlantic.com/magazine/archive/1945/07/as-we-may-think/303881/][As We May Think, The Atlantic Monthly, Jul 1945]])
However implementation is hardly approaching ideas developed
by Douglas Engelbart.

I have not seized experiments with this extension,
that is why I could not give compatibility promise.
Unsure if it is reliable enough, personally I find it acceptable.

* Example of link capture

#+begin_example org
  ,* Link: Karl Voit: UOMF: Managing web bookmarks with Org Mode
  :PROPERTIES:
  :DATE_ADDED: [2021-09-28 Tue 12:15]
  :END:

  - Link URL :: [[https://karl-voit.at/2014/08/10/bookmarks-with-orgmode/]]
  - Link text :: Karl Voit: UOMF: Managing web bookmarks with Org Mode

  ,#+begin_quote
  author: Karl Voit
  published: [2014-08-10 Sun]
  ,#+end_quote

  On the page

  ,** Adam Porter — org-almanac
  :PROPERTIES:
  :DATE_ADDED: [2021-09-28 Tue 12:15]
  :LAST_MODIFIED: [2021-09-18 Tue 01:23]​ 09/18/2021 01:23:46
  :END:

  - URL :: [[https://alphapapa.github.io/org-almanac/]]
  - title :: org-almanac
  - author :: Adam Porter
  - referrer :: [[https://www.google.com/]]
#+end_example

* Install

This extension is in its alpha stage, so it has not published to
browsers' add-on catalogues.

Signed Firefox extension could be found in releases section
on github: https://github.com/maxnikulin/linkremark/releases

In Chrome create a symlink =manifest.json= to the =manifest-chrome.json= file
and load it as unpacked extension. Pin the extension to have its icon
in the toolbar.

For everyday use you might wish to configure native application
helper or desktop-wide org-protocol handler instead of
clipboard to pass captures to your notes.

* Usage
  :PROPERTIES:
  :EXPORT_TITLE: LinkRemark Help
  :END:

Optionally select some text and choose an option from context menu (right click,
=[Menu]= or =[Shift+F10]= keys).
Unless you are going to capture a particular link,
you can click on the extension icon in browser toolbar ("browser action")
or may configure a shortcut on the add-ons page.[fn:addons]

By default the extension just shows preview for the note
and offers to copy it to clipboard,
so you just can paste ot to a text editor.
Emacs Org mode has a convenient command [[help:org-paste-subtree][=C-c C-x C-y=, ~org-paste-subtree~]].[fn:pastesubtree]
A hint: to navigate to the parent heading before pasting
you can use [[help:org-refile][=C-u C-c C-w= ~org-refile~]]
or [[help:org-goto][=C-c C-j= ~org-goto~]] (maybe with prefix argument as well).

# Sorry, github renderer can not transform info: to hyperlinks
[[https://orgmode.org/manual/Capture.html#Capture][Capture templates (web)]]
or [[info:org#Capture][info "(org) Capture"]] is the next step for Org mode users.
You could start with a very simple template having "plain" type
#+begin_example emacs-lisp
  (custom-set-variables
   '(org-capture-templates
     (quote (
      ("c" "Clipboard with tree (plain)"
       plain (file "~/org/capture.org")
       "%(org-get-x-clipboard 'CLIPBOARD)"
       :empty-lines 1)
  ))))
#+end_example
You can add such entry using [[elisp:(progn (require 'org-capture) (customize-variable 'org-capture-templates))][M-x customize-variable RET org-capture-templates]].
On the current development stage I do not recommend
=:immediate-finish= option, it is better to inspect capture result.
It is impossible to refile plain entry directly from a capture buffer,
so likely you wish to change "plain" (Plain text) to "entry" (Org entry) type
in Emacs configuration and to change template to
="* %(org-get-x-clipboard 'CLIPBOARD)"=.
Please, update "Template type configured in org-capture-templates"
in add-on settings as well (may be opened from preview page,
or from browser add-ons page[fn:addons].

There is an option to avoid preview page for successful captures:
disable "Open preview tab with capture result for clipboard".

Usually, to minimize keyboard and mouse interaction,
it is recommended to setup desktop-wide [[https://orgmode.org/worg/org-contrib/org-protocol.html][org-protocol:]] handler
(currently readme for
[[https://github.com/sprig/org-capture-extension/][Org Capture Extension]]
may be more useful than Worg page).
I am a bit afraid that some web page may try to inject
some malicious content into my notes when I click on an innocent link,
so I suggest to consider exporting
through a native messaging application as a safer option.[fn:snap]
LinkRemark repository contains a simple variant in
[[file:examples/backend-python/lr_emacsclient.py]]
Run it with =-h= option for a brief guide. To enable it,
you should do something like (Linux, Firefox)
#+begin_example
  mkdir ~/.mozilla/native-messaging-hosts
  python3 examples/backend-python/lr_emacsclient.py --manifest-firefox \
     >~/.mozilla/native-messaging-hosts/lr_emacsclient.json
#+end_example
and should specify "=native-messaging="
for "Communication Channel" / "Method how to pass capture to desktop environment"
and "=lr_emacsclient=" for "Browser native messaging communication channel" /
"Name of native messaging backend application" add-on settings.
Emacs init file should have something like the following:
#+begin_example emacs-lisp
  (custom-set-variables
   '(org-capture-templates
     (quote (
      ("r" "LinkRemark (entry)"
       entry (file "~/org/capture.org")
       "* %:initial"
       :empty-lines 1)
  ))))
#+end_example
Certainly Emacs server should be running: [[elisp:(server-start)][M-x server-start]]
and org-protocol should be loaded: [[elisp:(require 'org-protocol)][M-: (require 'org-protocol)]].
Keep capture type in Emacs consistent with
"Template type configured in org-capture-templates"
add-on setting. Another option you may find useful
is "Template name". They are in the "Org Protocol" section,
but applied for native app export as well.

If you wish to experiment with metadata formatting, have a look at
[[file:examples/backend-python/lr_example.py]] for inspiration.
See the next section for a more powerful native messaging helper.

If you are not familiar with Org Mode capture feature,
you could find description of workflow in blogs, e.g.
[[https://sachachua.com/blog/2015/02/learn-take-notes-efficiently-org-mode/][Learn how to take notes more efficiently in Org Mode]]
by Sacha Chua.

[fn:addons] "Settings" or "Manage extension" in context menu (right click)
for the add-on's browser action
button or through generic browser menu,
e.g. Firefox: "Add-ons and Themes" from hamburger menu
or from "Tools" in menu bar, =[Ctrl+Shift+A]=.

[fn:pastesubtree] There is some bug and subtree is not recognized
first time in X clipboard. Workaround is yank =C-y=, undo =C-y= =C-/=
(required once per Emacs session), and =C-c C-x C-y= to paste subtree.

[fn:snap] There is a problem with browsers distributed
as snap or flatpack. Such applications works with
additional level of isolation in respect to system files,
so external application can not be invoked even through
native messaging API. Chromium in Ubuntu is shipped as
snap package only since Ubuntu-20.04 LTS focal, for Firefox snap is made
default option in Ubuntu-21.10 impish, but Firefox is still
can be installed as a deb package using apt.
Related Firefox bugs:
- [[https://bugzilla.mozilla.org/show_bug.cgi?id=1661935][Bug 1661935: Snap: cannot install/manage extensions from extensions.gnome.org]],
- [[https://bugzilla.mozilla.org/show_bug.cgi?id=1621763][Bug 1621763: (flatpak) native messaging support missing]].


* Checking if an URL is already in your notes

This feature is planned for LinkRemark-0.2 release
and is not included in 0.1 version. Please, consider current implementation
as a proof of concept, there are a lot of things to polish yet.
It is tested on Linux only.

#+attr_html: :alt Screenshot of Preview & Debug Info page of LinkRemark extension for capture of https://orgmode.org/ when org-manual.org and org-guide.org are configured as note files for bURL
#+attr_html: :style max-height: 50%
[[file:doc/burl-linkremark-preview-demo.png]]

bURL [[https://github.com/maxnikulin/burl]] native messaging app (backend)
is required. It allows to invoke emacsclient directly without setting up
of desktop-wide handler for org-protocol. I do not think that protocol
of internal communication between LinkRemark and bURL is stabilized already.

[[https://github.com/maxnikulin/burl][README file for bURL]]
describes how to install and to configure the native application
(unsure if it is clear enough). Key points:
- [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html][Server]] ([[info:emacs#Emacs Server][info "(emacs) Emacs Server"]])
  is running in Emacs unless it is enough to just see locations of same
  URL in your notes. Otherwise neither clicks on found mentions
  nor org-protocol capture would work.
- [[https://orgmode.org/manual/Protocols.html][org-protocol]] ([[info:org#Protocols][info "(org) Protocols"]])
  is loaded and a template is configured
  to enable capture feature. Alternatively use clipboard and
  [[help:org-paste-subtree][=C-c C-x C-y=, ~org-paste-subtree~]].
- Native application is enabled in browser for LinkRemark extension.
  On Linux a JSON file should be created.
- List of files to search for URLs is provided to bURL.
  Currently it is achieved by creating of a wrapper shell script
  for =burl_backend=.

bURL may create configuration files for your. To enable native backend
for particular user of Firefox on Linux assuming that =burl_backend=
binary is copied to =~/.local/bin=, run a command similar to the following one:

#+begin_example
  mkdir ~/.mozilla/native-messaging-hosts
  ~/.local/bin/burl_backend -manifest-firefox ~/.mozilla/native-messaging-hosts/ \
      -backend burl \
      -wrapper ~/.local/bin/burl_wrapper \
      -org ~/org/notes.org \
      -org ~/org/capture.org
#+end_example

It should create =burl_wrapper= shell script and =burl.json= file
(=io.github.maxnikulin.burl.json= without =-backend= option) in
[[file:~/.mozilla/native-messaging-hosts/]] (its basename is the identifier
of the native application).

Open LinkRemark settings page[fn:addons]. Set "Name of native messaging backend
application" in the "Browser native messaging communication channel" section
to the id of configured native app (e.g. =burl=
or =io.github.maxnikulin.burl=). Grant permission for
"Exchange messages with other programs" (in Firefox, while compatibility with
Firefox-78 is maintained, this permission is requested during installation).

Known URLs should be reported in response to capture of pages already
present in your notes. Preview and debug info page has a form for testing
of this feature.

You can set "Method how to pass capture to desktop environment" to
"native-messaging", however it is not required. You can continue
with clipboard or org-protocol desktop-wide handler.

* Alternatives

There are some projects that allows to capture URL + page title +
selection text or URL + text link. It is not enough for me.
I would like to save to my notes who and when wrote the text
at least for sites that have such fields in page metadata.

To capture a minimal bookmark one of the following projects
could be more convenient:
- [[https://github.com/sprig/org-capture-extension/][GitHub - sprig/org-capture-extension]]:
  A Chrome and firefox extension facilitating org-capture in emacs.
- [[https://github.com/alphapapa/org-protocol-capture-html][GitHub - alphapapa/org-protocol-capture-html]]:
  Capture HTML from the browser selection into Emacs as org-mode content.
- [[https://github.com/karlicoss/grasp][GitHub - karlicoss/grasp]]:
  A reliable org-capture browser extension for Chrome/Firefox.

If you would like to have more details on web pages in you notes then consider
[[https://github.com/yantar92/org-capture-ref][GitHub - yantar92/org-capture-ref]]:
Extract metadata/bibtex info from websites for org-capture.
It is suitable if web browser of your choice is Emacs or Qute Browser.
Unlike this extension, it supports custom handlers for particular
websites, and has recipes for scientific papers and BibTeX format.

* Permissions

You could find more information what every requested
permission means on the following page frim the Mozilla Support site:
[[https://support.mozilla.org/kb/permission-request-messages-explained]]
"Permission request messages explained".

** Requested on Install

*** Access your data for all websites (=<all_urls>=)

The add-on may gather data for a group of selected (highlighted)
tabs in Firefox or from subframes loaded from other site
than top level page in the tab. Due to some limitations
of WebExtensions API, per-site permission requests on demand
may require several steps of interaction with
user to complete a capture. It may be annoying after all.
This permission may be perceived as "too much". In future I may
consider making it optional one.

It is a bug, if this extension attempts to inspect content
of some tab without explicit user action.

*** Exchange messages with other programs (=nativeMessaging=)

Chrome: "Communicate with cooperating native applications", optional.

Allows the extension to communicate with Emacs without global org-protocol
handler, so allows to have more secure setup. On the other hand
you need to install and configure an extra application, so you should
either trust this external tool or should develop it yourself.

This permission is relevant for experienced Emacs and Org Mode users.

This permission can not be requested on demand in Firefox-78.10 ESR
available in Debian stable,
see [[https://bugzilla.mozilla.org/1630415]]
"1630415 - make nativeMessaging an optional permission".

Extension can not launch any application till it is explicitly added
to a configuration file (manifest) by the user, so do not worry,
extensions can not run arbitrary binaries with no cooperation from users.

*** Access browser activity during navigation (=webNavigation=)

Chrome: "Read your browsing history".

It is necessary to reliably restore tree of nested frames.
Consider the case when some element is focused in a subframe
and capture is invoked using keyboard shortcut.
Maybe I will add a less reliable fallback in future
to make this permission optional.

** Optional permissions

Open browser extensions preferences[fn:addons] to manage this set of permissions.
Switches are available on add-on custom settings page and in browser settings UI.
They may be requested on demand to successfully complete requested action
taking into account current settings.

*** Access browser tabs (=tabs=)

Additional feature is available in Firefox only.
When granted, it is possible to capture a group of tabs.
Select some tabs e.g. by holding =[Ctrl]= while clicking on tab headers
and open context menu (right click) for a header of selected tab.

Requested on demand when not granted.

*** Input data to the clipboard (=clipboardWrite=)

Chrome: "Modify data you copy and paste", but it is currently
requested for Firefox only.

In Firefox, without such permission, an extension can not copy data
to clipboard except if it is immediate action in response to e.g.
click on a button. Clicking on extension button is not the case
since a lot of work should be done before data become ready for copy,
so it is not considered as "in response to user action".
Enable this permission if you prefer to avoid preview page
as an intermediate state.

Browsers consider overwriting clipboard content as a potentially
dangerous action, so they perform, some measures to protect users.
Security model in Chrome is different from Firefox, so this permission
does not do anything really useful in Chrome. However unlike Firefox
it allows to call ~document.execCommand("copy")~ from content scripts,
so the extension can do its job. For privileged tabs (e.g. PDF files)
preview page is unavoidable in Chrome and can appear for a second.
Sorry for this inconvenience.

This permission may be revoked as soon as you configure native application
or desktop-wide org-protocol handler.

* Troubleshooting

1. Try to open Debug Info (Preview) extension page through context menu for
   the extension button in tool bar (extension browser action)
   end expand debug info section there.
2. Look for errors in console pane in browser developer tools for the extension.
   It could be opened using "Inspect" link from the =about:debugging#/runtime/this-firefox=
   page for Firefox. In Chrome menu choose "More tools", "Extensions" and click on the link
   followed "Inspect views" on the add-on card.

For native messaging backend problems see the related section in Mozilla
[[https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Native_messaging#Troubleshooting][developer guide]]
and Chrome [[https://developer.chrome.com/docs/apps/nativeMessaging/#native-messaging-debugging][debugging native messaging]]
docs. It is worth checking errors reported to the browser console
(=Ctrl+Shift+J= in Firefox). To read messages from Chrome on Linux, start it from a terminal or maybe
just try =journalctl --user --follow=.

* License

LinkRemark is published under [[https://www.gnu.org/licenses/gpl-3.0.html][the GNU GPLv3 license]] or any later
version. See the [[file:LICENSE.txt]] file in this directory.
