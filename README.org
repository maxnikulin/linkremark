
#+TITLE: LinkRemark â€” notes for web pages augmented by metadata

* Introduction

LinkRemark is a browser extension that allows to save some context
while capturing notes using GNU Emacs [[https://orgmode.org][Org mode]].
The add-on attempts to extract some metadata of the current web page:
author, time when the text was written.
Actually it just generates (almost) text notes using a few elements
of Org mode markup.

The idea is that the note for a link should not be just a *bookmark*
to the link target. It should reflect connection of the page
where it is found and the site it points to.
A site that brought you to the current page (referrer) could later
help find more information related to the topic.
Consider it as an element of associative trails described by Vannevar Bush.
However implementation is hardly approaching ideas developed
by Douglas Engelbart.

I have not seized experiments with this extension,
that is why I could not give compatibility promise.
Unsure if it is reliable enough, personally I find it acceptable.

* Example of link capture

#+begin_example org
Link: Karl Voit: UOMF: Managing web bookmarks with Org Mode
  :PROPERTIES:
  :DATE_ADDED: [2020-12-25 18:06]
  :END:

- Link URL :: [[https://karl-voit.at/2014/08/10/bookmarks-with-orgmode/]]
- Link text :: Karl Voit: UOMF: Managing web bookmarks with Org Mode

On the page

- URL :: [[https://alphapapa.github.io/org-almanac/]]
- title :: org-almanac
- author :: Adam Porter
- referrer :: [[https://www.google.com/]]
#+end_example

* Alternatives

There are some projects that allows to capture URL + page title +
selection text or URL + text link. It is not enough for me.
I would like to save to my notes who and when wrote the text
at least for sites that have such fields in page metadata.

To capture a minimal bookmark one of the following projects
could be more convenient:
- [[https://github.com/sprig/org-capture-extension/][GitHub - sprig/org-capture-extension]]:
  A Chrome and firefox extension facilitating org-capture in emacs.
- [[https://github.com/alphapapa/org-protocol-capture-html][GitHub - alphapapa/org-protocol-capture-html]]:
  Capture HTML from the browser selection into Emacs as org-mode content.
- [[https://github.com/karlicoss/grasp][GitHub - karlicoss/grasp]]:
  A reliable org-capture browser extension for Chrome/Firefox.

If would like to have more details on web pages in you notes then consider
[[https://github.com/yantar92/org-capture-ref][GitHub - yantar92/org-capture-ref]]:
Extract metadata/bibtex info from websites for org-capture.
It is suitable if web browser of your choice is Emacs or Qute Browser.
Unlike this extension, it supports custom handlers for particular
websites, and has recipes for scientific papers and BibTeX format.

* Install

This extension is in its alpha stage, so it has not published to
browsers' add-on catalogues.

Signed Firefox extension could be found in releases section
on github: https://github.com/maxnikulin/linkremark/releases

In Chrome create a symlink =manifest.json= to the =manifest-chrome.json= file
and load it as unpacked extension.

* Permissions

You could find more information what every requested
permission means on the following page:
[[https://support.mozilla.org/en-US/kb/permission-request-messages-explained]]

** Requested on Install
*** Exchange messages with other programs (=nativeMessaging=)

Chrome: "Communicate with cooperating native applications".

Allows the extension to communicate with Emacs without global org-protocol
handler, so allows to have more secure setup. On the other hand
you need to install and configure an extra application, so you should
either trust this external tool or should develop it yourself.

This permission is relevant for experienced Emacs and Org Mode users.

This permission can not be requested on demand in Firefox-78.10 ESR,
see [[https://bugzilla.mozilla.org/1630415]]
"1630415 - make nativeMessaging an optional permission".
Extension can not launch any application till it is explicitly added
to a configuration file (manifest) by the user.

** Optional permissions

*** Access browser tabs (=tabs=)

Chrome: "Read your browsing history".

Additional feature is avilable in Firefox only.
When granted, it is possible to capture a group of tabs.
Select some tabs e.g. by holding =[Ctrl]= while clicking on tab headers
and open context menu (right click) for a header of selected tab.

Requested on demand when not granted.

*** Input data to the clipboard (=clipboardWrite=)

Chrome: "Modify data you copy and paste", but it is currently
requested for Firefox only.

In Firefox, without such permission, an extension can not copy data
to clipboard except if it is immediate action in response to e.g.
click on a button. Clicking on extension button is not the case
since a lot of work should be done before data become ready for copy,
so it is not considered as "in response to user action".
Enable this permission if you prefer to avoid preview page
as an intermediate state.

Browsers consider overwriting clipboard content as a potentially
dangerous action, so they perform, some measures to protect users.
Security model in Chrome is different from Firefox, so this permission
does not do anything really useful in Chrome. However unlike Firefox
it allows to call ~document.execCommand("copy")~ from content scripts,
so the extension can do its job. For privileged tabs (e.g. PDF files)
preview page is unavoidable in Chrome and can appear for a second.
Sorry for this inconvenience.

* Usage

Optionally select some text and choose an option from the context menu (right click).

By default the extension just shows preview for the note
and offers to copt it to clipboard,
so it can be just yanked to the text editor.
[[https://orgmode.org/manual/Capture.html#Capture][Capture templates (web)]]
or [[info:org#Capture]] is the next step.
You could start with a very simple template having "plain" type
#+begin_example emacs-lisp
  ("c" "Clipboard with tree (plain)"
   plain (file "capture.org")
   "%(org-get-x-clipboard 'CLIPBOARD)"
   :empty-lines 1)
#+end_example
On the current development stage I do not recommend
=:immediate-finish= option, it is better to inspect capture result.

Later you likely would decide to setup external protocol handler
for [[https://orgmode.org/worg/org-contrib/org-protocol.html][org-protocol]]
or to create a native messaging backend.
In the latter case have a look at [[file:examples/backend-python/lr_example.py]]
for inspiration.

If you are not familiar with Org Mode capture feature,
you could find description of workflow in blogs, e.g.
[[https://sachachua.com/blog/2015/02/learn-take-notes-efficiently-org-mode/][Learn how to take notes more efficiently in Org Mode]]
by Sacha Chua.

* Troubleshooting

1. Try to open Debug Info (Preview) extension page through context menu for
   the extension button in tool bar (extension browser action)
   end expand debug info section there.
2. Look for errors in console pane in browser developer tools for the extension.
   It could be opened using "Inspect" link from the [[about:debugging#/runtime/this-firefox]]
   page for Firefox. In Chrome menu choose "More tools", "Extensions" and click on the link
   followed "Inspect views" on the add-on card.

For native messaging backend problems see the related section in Mozilla
[[https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/Native_messaging#Troubleshooting][developer guide]]
and Chrome [[https://developer.chrome.com/docs/apps/nativeMessaging/#native-messaging-debugging][debugging native messaging]]
docs. It is worth checking errors reported to the browser console
(=Ctrl+Shift+J= in Firefox). To read messages from Chrome on Linux, start it from a terminal or maybe
just try =journalctl --user --follow=.

* License

LinkRemark is published under [[https://www.gnu.org/licenses/gpl-3.0.html][the GNU GPLv3 license]] or any later
version. See the [[file:LICENSE.txt]] file in this directory.
