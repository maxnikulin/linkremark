#!/usr/bin/env python3

from argparse import ArgumentParser
import contextlib
from pathlib import Path
import sys


preamble = """
"use strict";

// Try to ignore errors in individual files.
// If `console.error` is used to report exceptions then they are collected
// in Chromium as happened in the service worker file, not the imported
// script. `Promise.reject` trick allows to get original exception location.
"""


def make_arg_parser():
    parser = ArgumentParser(
        description="Create service worker script from list of .js files to load")
    parser.add_argument(
        '-o', '--output', default='-', metavar='OUTPUT_FILE',
        help='output file, default to stdout ("-")')
    parser.add_argument(
        '-i', '--init', metavar='INIT_JS', type=Path, action='append',
        help='init file, not wrapped into try-catch')
    parser.add_argument(
        '-m', '--main', metavar='MAIN_JS', type=Path, action='append',
        help='main file, added last, not wrapped into try-catch')
    parser.add_argument(
        '-c', '--catch', metavar="EXPR", action="append", default=[],
        help="JavaScript expression added to catch statement after importScript")
    parser.add_argument(
        'src', metavar='JS_FILE', nargs='*', type=Path,
        help='source file')
    return parser


def main():
    parser = make_arg_parser()
    args = parser.parse_args()

    fail = False
    for f in filter(lambda f: not f.is_file(), args.init + args.src + args.main):
        print(f'{f}: not a file', file=sys.stderr)
        fail = True
    if fail:
        sys.exit(1)

    with contextlib.ExitStack() as stack:
        if args.output != '-':
            f = stack.enter_context(open(args.output, "w"))
            stack.enter_context(contextlib.redirect_stdout(f))

        print("// This is an autogenerated file, do not edit it.")
        print(f"// Created by {sys.argv[0]}")
        print(preamble)
        if len(args.init) > 0:
            print("importScripts(")
            for f in args.init:
                print(f'\t"{f}",')
            print(");")

        for f in args.src:
            print("try {")
            print(f'\timportScripts("{f}");')
            print("} catch (ex) {")
            print("\tPromise.reject(ex);")
            for e in args.catch:
                print(f'\t{e}')
            print("}")

        if len(args.main) > 0:
            print("importScripts(")
            for f in args.main:
                print(f'\t"{f}",')
            print(")")


if __name__ == '__main__':
    main()
